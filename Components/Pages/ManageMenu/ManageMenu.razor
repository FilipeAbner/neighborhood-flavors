@page "/manage-menu"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IJSRuntime JsRuntime
@inject MenuService service

@inject StateContainer stateContainer

<PageTitle>Restaurante - Cardápios</PageTitle>

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Meus Cardápios</h2>
        <button class="btn btn-success btn-padding" @onclick="() => OpenCreateMenu(restaurant.Id)">Novo</button>
    </div>

    @if (!String.IsNullOrEmpty(restaurant.Name))
    {
        <div>
            <h4>
                Seja bem-vindo ao restaurante @restaurant.Name
            </h4>
        </div>
    }

    <div class="cardapios-grid">

        @if (Menus.Count == 0 || Menus == null)
        {
            <div class="cardapio-card">
                <div class="card">
                    <div class="card-body">
                        <p>
                            Não existe cardápios cadastrados!
                        </p>
                    </div>
                </div>
            </div>
        }
        else
        {
            @foreach (var menu in Menus)
            {
                <div class="cardapio-card">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title text-center">Cardápio</h5>

                            <ul class="list-group list-group-flush">
                                @foreach (var itemMenu in menu.ItemMenus)
                                {
                                    <li class="list-group-item">@itemMenu.Item!.ItemName</li>
                                }
                            </ul>

                            <div class="rating mt-3 text-center">
                                <label>Avaliação: @menu.avgRating</label>
                                <div class="stars">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <div class="star">
                                            <div class="star-inner" style="width:@GetStarWidth(menu.avgRating, i)%"></div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="card-footer text-center">
                            <button class="btn btn-danger btn-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" @onclick="() => DeleteMenu(menu)" class="icon"
                                    viewBox="0 0 448 512">
                                    <path
                                        d="M135.2 17.7L128 32 32 32C14.3 32 0 46.3 0 64S14.3 96 32 96l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 0-7.2-14.3C307.4 6.8 296.3 0 284.2 0L163.8 0c-12.1 0-23.2 6.8-28.6 17.7zM416 128L32 128 53.2 467c1.6 25.3 22.6 45 47.9 45l245.8 0c25.3 0 46.3-19.7 47.9-45L416 128z" />
                                </svg>
                            </button>

                            <button class="btn btn-primary btn-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" @onclick="() => OpenEditMenu(menu)" class="icon"
                                    viewBox="0 0 512 512">
                                    <path
                                        d="M441 58.9L453.1 71c9.4 9.4 9.4 24.6 0 33.9L424 134.1 377.9 88 407 58.9c9.4-9.4 24.6-9.4 33.9 0zM209.8 256.2L344 121.9 390.1 168 255.8 302.2c-2.9 2.9-6.5 5-10.4 6.1l-58.5 16.7 16.7-58.5c1.1-3.9 3.2-7.5 6.1-10.4zM373.1 25L175.8 222.2c-8.7 8.7-15 19.4-18.3 31.1l-28.6 100c-2.4 8.4-.1 17.4 6.1 23.6s15.2 8.5 23.6 6.1l100-28.6c11.8-3.4 22.5-9.7 31.1-18.3L487 138.9c28.1-28.1 28.1-73.7 0-101.8L474.9 25C446.8-3.1 401.2-3.1 373.1 25zM88 64C39.4 64 0 103.4 0 152L0 424c0 48.6 39.4 88 88 88l272 0c48.6 0 88-39.4 88-88l0-112c0-13.3-10.7-24-24-24s-24 10.7-24 24l0 112c0 22.1-17.9 40-40 40L88 464c-22.1 0-40-17.9-40-40l0-272c0-22.1 17.9-40 40-40l112 0c13.3 0 24-10.7 24-24s-10.7-24-24-24L88 64z" />
                                </svg>
                            </button>
                            <button class="btn btn-success btn-sm" @onclick="() => OpenViewMenu(menu)">
                                <svg viewBox="0 0 576 512" class="icon">
                                    <path
                                        d="M288 80c-65.2 0-118.8 29.6-159.9 67.7C89.6 183.5 63 226 49.4 256c13.6 30 40.2 72.5 78.6 108.3C169.2 402.4 222.8 432 288 432s118.8-29.6 159.9-67.7C486.4 328.5 513 286 526.6 256c-13.6-30-40.2-72.5-78.6-108.3C406.8 109.6 353.2 80 288 80zM95.4 112.6C142.5 68.8 207.2 32 288 32s145.5 36.8 192.6 80.6c46.8 43.5 78.1 95.4 93 131.1c3.3 7.9 3.3 16.7 0 24.6c-14.9 35.7-46.2 87.7-93 131.1C433.5 443.2 368.8 480 288 480s-145.5-36.8-192.6-80.6C48.6 356 17.3 304 2.5 268.3c-3.3-7.9-3.3-16.7 0-24.6C17.3 208 48.6 156 95.4 112.6zM288 336c44.2 0 80-35.8 80-80s-35.8-80-80-80c-.7 0-1.3 0-2 0c1.3 5.1 2 10.5 2 16c0 35.3-28.7 64-64 64c-5.5 0-10.9-.7-16-2c0 .7 0 1.3 0 2c0 44.2 35.8 80 80 80zm0-208a128 128 0 1 1 0 256 128 128 0 1 1 0-256z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<ViewMenuModal @ref="viewMenu" />
<CreateMenuModal @ref="createMenu" OnMenuCreated="GetMenus" />
<EditMenuModal @ref="editMenu" OnMenuUpdated="GetMenus" />

<style>
    .icon {
        fill: white;
        transform: scale(1.4);
    }

    .cardapios-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        overflow-y: auto;
        max-height: 80vh;
    }

    .cardapio-card {
        width: 16%;
        min-width: 200px;
    }

    .card {
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .rating .stars {
        display: flex;
        justify-content: center;
    }

    .rating .star {
        position: relative;
        display: inline-block;
        width: 24px;
        height: 24px;
        background-color: #A9A9A9;
        clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
    }

    .rating .star-inner {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        background-color: #ffcc00;
    }

    .card-footer .btn {
        width: 30px;
        height: 30px;
        margin: 0 5px;
    }

    /* Estilos para o botão "Novo" */
    .btn-padding {
        padding: 10px 20px;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    @*padding:0.375rem0.75rem;*@
    }
</style>

@code {
    protected override void OnInitialized()
    {
        if (stateContainer.CurrentRestaurant is not null)
        {
            restaurant = stateContainer.CurrentRestaurant;
        }
    }

    List<Menu> Menus = new List<Menu>();
    Menu? SelectedMenu { get; set; }
    private ElementReference? ModalElement { get; set; }

    ViewMenuModal viewMenu = default!;
    CreateMenuModal createMenu = default!;
    EditMenuModal editMenu = default!;
    Restaurant restaurant = new();

    private async Task OpenViewMenu(Menu menu)
    {
        await viewMenu.OpenMenuModal(menu);
    }
    private async Task OpenCreateMenu(int restaurantId)
    {
        await createMenu.OpenMenuModal(restaurantId);
    }

    private async Task OpenEditMenu(Menu menu)
    {
        await editMenu.OpenEditMenuModal(menu);
    }

    private async Task GetMenus()
    {
        Menus = await service.GetMenusByRestaurantIdAsync(restaurant.Id);
    }

    private async Task DeleteMenu(Menu menu)
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Tem Certeza que deseja excluir?");
        if (confirm)
        {
            await service.DeleteMenuAsync(menu);
            await GetMenus();
        }
    }

    protected override async Task
    OnInitializedAsync()
    {
        await GetMenus();
    }

    public string GetStarWidth(double? rating, int starIndex)
    {
        double rat = rating ?? 0;
        double fullStars = Math.Min(Math.Max(rat - starIndex + 1, 0), 1);
        return (fullStars * 100).ToString("F0");
    }
}