@page "/createmenu"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IJSRuntime JsRuntime
@inject MenuService service

<PageTitle>Restaurante - Cardápios</PageTitle>

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Meus Cardápios</h2>
        <button type="button" class="btn btn-success btn-padding">Novo</button>
    </div>

    <div class="cardapios-grid">
        @foreach (var menu in Menus)
        {
                <div class="cardapio-card">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title text-center">Cardápio @menu.Id</h5>
                            <ul class="list-group list-group-flush">
                            @foreach (var itemMenu in menu.ItemMenus)
                            {
                                        <li class="list-group-item">@itemMenu.Item.ItemName</li>
                            }
                            </ul>
                            <div class="rating mt-3 text-center">
                                <label>Avaliação: @menu.avgRating</label>
                                <div class="stars">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <div class="star">
                                            <div class="star-inner" style="width:@GetStarWidth(menu.avgRating, i)%"></div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="card-footer text-center">
                            <button class="btn btn-danger btn-sm">D</button>
                            <button class="btn btn-primary btn-sm">
                                <svg viewBox="0 0 576 512" class="icon"><path d="M288 80c-65.2 0-118.8 29.6-159.9 67.7C89.6 183.5 63 226 49.4 256c13.6 30 40.2 72.5 78.6 108.3C169.2 402.4 222.8 432 288 432s118.8-29.6 159.9-67.7C486.4 328.5 513 286 526.6 256c-13.6-30-40.2-72.5-78.6-108.3C406.8 109.6 353.2 80 288 80zM95.4 112.6C142.5 68.8 207.2 32 288 32s145.5 36.8 192.6 80.6c46.8 43.5 78.1 95.4 93 131.1c3.3 7.9 3.3 16.7 0 24.6c-14.9 35.7-46.2 87.7-93 131.1C433.5 443.2 368.8 480 288 480s-145.5-36.8-192.6-80.6C48.6 356 17.3 304 2.5 268.3c-3.3-7.9-3.3-16.7 0-24.6C17.3 208 48.6 156 95.4 112.6zM288 336c44.2 0 80-35.8 80-80s-35.8-80-80-80c-.7 0-1.3 0-2 0c1.3 5.1 2 10.5 2 16c0 35.3-28.7 64-64 64c-5.5 0-10.9-.7-16-2c0 .7 0 1.3 0 2c0 44.2 35.8 80 80 80zm0-208a128 128 0 1 1 0 256 128 128 0 1 1 0-256z"/></svg>
                            </button>
                            <button class="btn btn-success btn-sm">U</button>
                        </div>
                    </div>
                </div>
        }
    </div>
</div>

@functions {
    public string GetStarWidth(double rating, int starIndex)
    {
        double fullStars = Math.Min(Math.Max(rating - starIndex + 1, 0), 1);
        return (fullStars * 100).ToString("F0");
    }
}

<style>
    .icon {
        fill: white;
        transform: scale(1.6);
    }
    .cardapios-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        overflow-y: auto;
        max-height: 80vh;
    }

    .cardapio-card {
        width: 16%;
        min-width: 200px;
    }

    .card {
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .rating .stars {
        display: flex;
        justify-content: center;
    }

    .rating .star {
        position: relative;
        display: inline-block;
        width: 24px;
        height: 24px;
        background-color: #A9A9A9;
        clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
    }

    .rating .star-inner {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        background-color: #ffcc00;
    }
    .card-footer .btn {
        width: 30px;
        height: 30px;
        margin: 0 5px;
    }

    /* Estilos para o botão "Novo" */
    .btn-padding {
        padding: 10px 20px;
    }
</style>

@code {
    List<Menu> Menus = new List<Menu>();
    string? statusMsg = "";
    private async Task GetMenus()
    {
        Menus = await service.GetMenusByRestaurantIdAsync(1);
    }

    private async Task DeleteMenu(Menu menu)
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Tem Certeza que deseja excluir?");
        if (confirm)
        {
            await service.DeleteMenuAsync(menu);
            statusMsg = "Menu deletado com sucesso!";
            await GetMenus();
        }
    }

    protected override async Task
    OnInitializedAsync()
    {
        await GetMenus();
    }
}